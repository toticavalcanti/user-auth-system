# Etapa 1: Construir a aplicação
FROM node:16-alpine as build
WORKDIR /app

# Instalar dependências do sistema necessárias para o npm funcionar corretamente
RUN apk add --no-cache python3 make g++

# Copiar package.json e package-lock.json
COPY frontend/react-auth/package*.json ./

# Instalar dependências com a flag --legacy-peer-deps para evitar problemas de dependência
RUN npm ci --legacy-peer-deps --verbose

# Copiar o restante dos arquivos do projeto
COPY frontend/react-auth/ ./

# Define as variáveis de ambiente para o build
ENV REACT_APP_API_URL=/api

# Construir o aplicativo para produção
RUN npm run build

# Etapa 2: Configurar o servidor de produção usando Nginx para servir o conteúdo estático
FROM nginx:alpine

# Copiar os arquivos estáticos construídos da etapa de build
COPY --from=build /app/build /usr/share/nginx/html

# Copiar a configuração personalizada do Nginx
COPY frontend/react-auth/nginx.conf /etc/nginx/conf.d/default.conf

# Copiar o script de entrada personalizado
COPY frontend/react-auth/docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Expor a porta 80 para permitir o acesso ao servidor Nginx
EXPOSE 80

# Usar o script de entrada personalizado para substituir variáveis e iniciar o Nginx
ENTRYPOINT ["/docker-entrypoint.sh"]

# Comando para iniciar o Nginx
CMD ["nginx", "-g", "daemon off;"]
